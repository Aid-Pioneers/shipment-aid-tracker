-- create table for tracking user profiles
create table "public"."profile" (
    "id" uuid not null,
    "first_name" text,
    "last_name" text,
    "email" text
);

create unique index profiles_pkey on public.profile using btree (id);

alter table "public"."profile" add constraint "profiles_pkey" primary key using index "profiles_pkey";

alter table "public"."profile" add constraint "profile_id_fkey" foreign key (id) references auth.users(id) on delete cascade not valid;

alter table "public"."profile" validate constraint "profile_id_fkey";

alter table "public"."profile" enable row level security;

create policy "enable read for authenticated users only"
on "public"."profile"
as permissive
for select
to authenticated
using (true);


create policy "users can insert their own profile."
on "public"."profile"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "users can update own profile."
on "public"."profile"
as permissive
for update
to public
using ((auth.uid() = id));

-- create table for defining user roles
create table "public"."role" (
    "id" bigint generated by default as identity not null,
    "role" text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);

create unique index role_pkey on public.role using btree (id);

create unique index role_role_key on public.role using btree (role);

alter table "public"."role" add constraint "role_pkey" primary key using index "role_pkey";

alter table "public"."role" add constraint "role_role_key" unique using index "role_role_key";

alter table "public"."role" enable row level security;

create policy "allow read for authenticated users"
on "public"."role"
as permissive
for select
to authenticated
using (true);

insert into public.role
    (role)
values
    ('manager'),
    ('donor');

-- create table for tracking which users have which roles
create table "public"."profile_role" (
    "profile_id" uuid not null,
    "role_id" bigint not null
);

create unique index profile_role_pkey on public.profile_role using btree (profile_id, role_id);

alter table "public"."profile_role" enable row level security;

alter table "public"."profile_role" add constraint "profile_role_profile_id_fkey" foreign key (profile_id) references profile(id) not valid;

alter table "public"."profile_role" validate constraint "profile_role_profile_id_fkey";

alter table "public"."profile_role" add constraint "profile_role_role_id_fkey" foreign key (role_id) references role(id) not valid;

alter table "public"."profile_role" validate constraint "profile_role_role_id_fkey";

alter table "public"."profile_role" add constraint "profile_role_pkey" primary key using index "profile_role_pkey";

-- create a table for mapping profiles to shipments
create table "public"."shipment_manager" (
    "profile_id" uuid not null,
    "shipment_id" bigint not null
);


alter table "public"."shipment_manager" enable row level security;

create unique index shipment_manager_pkey on public.shipment_manager using btree (profile_id, shipment_id);

alter table "public"."shipment_manager" add constraint "shipment_manager_pkey" primary key using index "shipment_manager_pkey";

alter table "public"."shipment_manager" add constraint "shipment_manager_profile_id_fkey" foreign key (profile_id) references profile(id) not valid;

alter table "public"."shipment_manager" validate constraint "shipment_manager_profile_id_fkey";

alter table "public"."shipment_manager" add constraint "shipment_manager_shipment_id_fkey" foreign key (shipment_id) references shipment(id) not valid;

alter table "public"."shipment_manager" validate constraint "shipment_manager_shipment_id_fkey";

create policy "enable inserts for managers only"
on "public"."shipment_manager"
as permissive
for insert
to authenticated
with check (auth.uid() in (
    select  profile_role.profile_id
    from    (profile_role
            join role on (profile_role.role_id = role.id and role.role = 'manager'::text)
            )
    ));

create policy "enable read for authenticated users only"
on "public"."shipment_manager"
as permissive
for select
to authenticated
using (true);

-- inserts a row into public.profile
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profile (id, first_name, last_name, email)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name', new.email);
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();