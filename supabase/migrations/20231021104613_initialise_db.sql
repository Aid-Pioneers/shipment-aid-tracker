create extension if not exists "postgis" with schema "extensions";


create table "public"."consignee_partner" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now()
);


alter table "public"."consignee_partner" enable row level security;

create table "public"."country" (
    "id" bigint generated by default as identity not null,
    "name" text not null
);


alter table "public"."country" enable row level security;

create table "public"."donor" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now()
);


alter table "public"."donor" enable row level security;

create table "public"."pallet" (
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "id" bigint generated by default as identity not null,
    "shipment_id" bigint not null
);


alter table "public"."pallet" enable row level security;

create table "public"."pallet_scan" (
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "location" geography not null,
    "id" bigint generated by default as identity not null,
    "pallet_id" bigint
);


alter table "public"."pallet_scan" enable row level security;

create table "public"."project" (
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "name" text not null,
    "id" bigint generated by default as identity not null
);


alter table "public"."project" enable row level security;

create table "public"."shipment" (
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "destination_id" bigint not null,
    "donor_id" bigint,
    "bookkeeping_flexport" boolean,
    "bookkeeping_gik" boolean,
    "drive_link" text,
    "commercial_invoice_link" text,
    "estimated_delivery_date" timestamp with time zone,
    "flexport_tracking_id" text,
    "freight_tracking_id" text,
    "gik_value_amount_usd" numeric,
    "logistics_expense_donation_usd" numeric,
    "main_shipment_type_id" bigint,
    "weight_kg" numeric,
    "consignee_id" bigint,
    "impact_reporting" boolean,
    "patients_treated" numeric,
    "status_id" bigint not null,
    "id" bigint generated by default as identity not null,
    "project_id" bigint
);


alter table "public"."shipment" enable row level security;

create table "public"."shipment_status" (
    "id" bigint generated by default as identity not null,
    "status" text not null
);


alter table "public"."shipment_status" enable row level security;

create table "public"."shipment_type" (
    "id" bigint generated by default as identity not null,
    "shipment_type" text not null
);


alter table "public"."shipment_type" enable row level security;

CREATE UNIQUE INDEX consignee_partner_pkey ON public.consignee_partner USING btree (id);

CREATE UNIQUE INDEX country_id_key ON public.country USING btree (id);

CREATE UNIQUE INDEX country_pkey ON public.country USING btree (id);

CREATE UNIQUE INDEX donor_pkey ON public.donor USING btree (id);

CREATE UNIQUE INDEX pallet_id_key ON public.pallet USING btree (id);

CREATE UNIQUE INDEX pallet_pkey ON public.pallet USING btree (id);

CREATE UNIQUE INDEX pallet_scan_id_key ON public.pallet_scan USING btree (id);

CREATE UNIQUE INDEX pallet_scan_pkey ON public.pallet_scan USING btree (id);

CREATE UNIQUE INDEX project_id_key ON public.project USING btree (id);

CREATE UNIQUE INDEX project_name_key ON public.project USING btree (name);

CREATE UNIQUE INDEX project_pkey ON public.project USING btree (id);

CREATE UNIQUE INDEX shipment_id_key ON public.shipment USING btree (id);

CREATE UNIQUE INDEX shipment_pkey ON public.shipment USING btree (id);

CREATE UNIQUE INDEX shipment_status_pkey ON public.shipment_status USING btree (id);

CREATE UNIQUE INDEX shipment_type_pkey ON public.shipment_type USING btree (id);

alter table "public"."consignee_partner" add constraint "consignee_partner_pkey" PRIMARY KEY using index "consignee_partner_pkey";

alter table "public"."country" add constraint "country_pkey" PRIMARY KEY using index "country_pkey";

alter table "public"."donor" add constraint "donor_pkey" PRIMARY KEY using index "donor_pkey";

alter table "public"."pallet" add constraint "pallet_pkey" PRIMARY KEY using index "pallet_pkey";

alter table "public"."pallet_scan" add constraint "pallet_scan_pkey" PRIMARY KEY using index "pallet_scan_pkey";

alter table "public"."project" add constraint "project_pkey" PRIMARY KEY using index "project_pkey";

alter table "public"."shipment" add constraint "shipment_pkey" PRIMARY KEY using index "shipment_pkey";

alter table "public"."shipment_status" add constraint "shipment_status_pkey" PRIMARY KEY using index "shipment_status_pkey";

alter table "public"."shipment_type" add constraint "shipment_type_pkey" PRIMARY KEY using index "shipment_type_pkey";

alter table "public"."country" add constraint "country_id_key" UNIQUE using index "country_id_key";

alter table "public"."pallet" add constraint "pallet_id_key" UNIQUE using index "pallet_id_key";

alter table "public"."pallet" add constraint "pallet_shipment_id_fkey" FOREIGN KEY (shipment_id) REFERENCES shipment(id) ON DELETE CASCADE not valid;

alter table "public"."pallet" validate constraint "pallet_shipment_id_fkey";

alter table "public"."pallet_scan" add constraint "pallet_scan_id_key" UNIQUE using index "pallet_scan_id_key";

alter table "public"."pallet_scan" add constraint "pallet_scan_pallet_id_fkey" FOREIGN KEY (pallet_id) REFERENCES pallet(id) ON DELETE CASCADE not valid;

alter table "public"."pallet_scan" validate constraint "pallet_scan_pallet_id_fkey";

alter table "public"."project" add constraint "project_id_key" UNIQUE using index "project_id_key";

alter table "public"."project" add constraint "project_name_key" UNIQUE using index "project_name_key";

alter table "public"."shipment" add constraint "shipment_consignee_id_fkey" FOREIGN KEY (consignee_id) REFERENCES consignee_partner(id) not valid;

alter table "public"."shipment" validate constraint "shipment_consignee_id_fkey";

alter table "public"."shipment" add constraint "shipment_destination_id_fkey" FOREIGN KEY (destination_id) REFERENCES country(id) not valid;

alter table "public"."shipment" validate constraint "shipment_destination_id_fkey";

alter table "public"."shipment" add constraint "shipment_donor_id_fkey" FOREIGN KEY (donor_id) REFERENCES donor(id) not valid;

alter table "public"."shipment" validate constraint "shipment_donor_id_fkey";

alter table "public"."shipment" add constraint "shipment_id_key" UNIQUE using index "shipment_id_key";

alter table "public"."shipment" add constraint "shipment_main_shipment_type_id_fkey" FOREIGN KEY (main_shipment_type_id) REFERENCES shipment_type(id) not valid;

alter table "public"."shipment" validate constraint "shipment_main_shipment_type_id_fkey";

alter table "public"."shipment" add constraint "shipment_project_id_fkey" FOREIGN KEY (project_id) REFERENCES project(id) ON DELETE CASCADE not valid;

alter table "public"."shipment" validate constraint "shipment_project_id_fkey";

alter table "public"."shipment" add constraint "shipment_status_id_fkey" FOREIGN KEY (status_id) REFERENCES shipment_status(id) not valid;

alter table "public"."shipment" validate constraint "shipment_status_id_fkey";

create policy "Enable ALL actions for authenticated users only"
on "public"."consignee_partner"
as permissive
for all
to authenticated
with check (true);


create policy "Enable ALL actions for authenticated users only"
on "public"."country"
as permissive
for all
to authenticated
with check (true);


create policy "Enable ALL actions for authenticated users only"
on "public"."donor"
as permissive
for all
to authenticated
with check (true);


create policy "Enable read access for authenticated users."
on "public"."pallet"
as permissive
for select
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."project"
as permissive
for select
to authenticated
using (true);


create policy "Enable ALL actions for authenticated users only"
on "public"."shipment"
as permissive
for all
to authenticated
with check (true);


create policy "Enable read access for authenticated users."
on "public"."shipment"
as permissive
for select
to authenticated
using (true);


create policy "Enable ALL actions for authenticated users only"
on "public"."shipment_status"
as permissive
for all
to authenticated
with check (true);


create policy "Enable ALL actions for authenticated users only"
on "public"."shipment_type"
as permissive
for all
to authenticated
with check (true);




